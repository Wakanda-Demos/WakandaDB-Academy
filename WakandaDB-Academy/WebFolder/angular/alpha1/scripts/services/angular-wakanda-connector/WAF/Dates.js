/** This file is part of Wakanda software, licensed by 4D under*  (i) the GNU General Public License version 3 (GNU GPL v3), or*  (ii) the Affero General Public License version 3 (AGPL v3) or*  (iii) a commercial license.* This file remains the exclusive property of 4D and/or its licensors* and is protected by national and international legislations.* In any event, Licensee's compliance with the terms and conditions* of the applicable license constitutes a prerequisite to any use of this file.* Except as otherwise expressly stated in the applicable license,* such license does not include any other license or rights on this file,* 4D's and/or its licensors' trademarks and/or other proprietary rights.* Consequently, no title, copyright or other proprietary rights* other than those specified in the applicable license is granted.*/// WARNING : ISOToDate is published to the global scopefunction ISOToDate(string) {	var dd = new Date();	dd.setISO(string);	return dd;}function stringToSimpleDate(string){	if (string == null || string == "")		return null;	var arr = string.split('!');	if (arr.length < 3)		return null;	return new Date(Number(arr[2]), Number(arr[1])-1, Number(arr[0]));}Date.prototype.toJSON = function(key){	return this.toISO()+","+this.toSimpleDateString();}Date.prototype.toSimpleDateString = function(){	return "" + this.getDate() + "!" + (this.getMonth()+1) + "!" + (this.getYear()+1900);}Date.prototype.setISO = function (string) {    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?" +        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";    var d = string.match(new RegExp(regexp));    var offset = 0;    var date = new Date(d[1], 0, 1);    if (d[3]) { date.setMonth(d[3] - 1); }    if (d[5]) { date.setDate(d[5]); }    if (d[7]) { date.setHours(d[7]); }    if (d[8]) { date.setMinutes(d[8]); }    if (d[10]) { date.setSeconds(d[10]); }    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }    if (d[14]) {        offset = (Number(d[16]) * 60) + Number(d[17]);        offset *= ((d[15] == '-') ? 1 : -1);    }    offset -= date.getTimezoneOffset();    time = (Number(date) + (offset * 60 * 1000));    this.setTime(Number(time));}Date.prototype.toISO = function (format, offset) {    /* accepted values for the format [1-6]:     1 Year:       YYYY (eg 1997)     2 Year and month:       YYYY-MM (eg 1997-07)     3 Complete date:       YYYY-MM-DD (eg 1997-07-16)     4 Complete date plus hours and minutes:       YYYY-MM-DDThh:mmTZD (eg 1997-07-16T19:20+01:00)     5 Complete date plus hours, minutes and seconds:       YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)     6 Complete date plus hours, minutes, seconds and a decimal       fraction of a second       YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)    */    if (!format) { var format = 6; }    if (!offset) {        var offset = 'Z';        var date = this;    } else {        var d = offset.match(/([-+])([0-9]{2}):([0-9]{2})/);        var offsetnum = (Number(d[2]) * 60) + Number(d[3]);        offsetnum *= ((d[1] == '-') ? -1 : 1);        var date = new Date(Number(Number(this) + (offsetnum * 60000)));    }    var zeropad = function (num) { return ((num < 10) ? '0' : '') + num; }    var str = "";    str += date.getUTCFullYear();    if (format > 1) { str += "-" + zeropad(date.getUTCMonth() + 1); }    if (format > 2) { str += "-" + zeropad(date.getUTCDate()); }    if (format > 3) {        str += "T" + zeropad(date.getUTCHours()) +               ":" + zeropad(date.getUTCMinutes());    }    if (format > 5) {        var secs = Number(date.getUTCSeconds() + "." +                   ((date.getUTCMilliseconds() < 100) ? '0' : '') +                   zeropad(date.getUTCMilliseconds()));        str += ":" + zeropad(secs);    } else if (format > 4) { str += ":" + zeropad(date.getUTCSeconds()); }    if (format > 3) { str += offset; }    return str;};Date.prototype.isValid = function(){	return !isNaN(this.getTime());}